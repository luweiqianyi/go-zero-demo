// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbUserInfoFieldNames          = builder.RawFieldNames(&TbUserInfo{})
	tbUserInfoRows                = strings.Join(tbUserInfoFieldNames, ",")
	tbUserInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(tbUserInfoFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tbUserInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(tbUserInfoFieldNames, "`accountName`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tbUserInfoModel interface {
		Insert(ctx context.Context, data *TbUserInfo) (sql.Result, error)
		FindOne(ctx context.Context, accountName string) (*TbUserInfo, error)
		Update(ctx context.Context, data *TbUserInfo) error
		Delete(ctx context.Context, accountName string) error
	}

	defaultTbUserInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TbUserInfo struct {
		AccountName string         `db:"accountName"`
		NickName    sql.NullString `db:"nickName"`
		Birthday    sql.NullString `db:"birthday"`
		Gender      sql.NullInt64  `db:"gender"`
		AvatarPath  sql.NullString `db:"avatarPath"`
	}
)

func newTbUserInfoModel(conn sqlx.SqlConn) *defaultTbUserInfoModel {
	return &defaultTbUserInfoModel{
		conn:  conn,
		table: "`TbUserInfo`",
	}
}

func (m *defaultTbUserInfoModel) Delete(ctx context.Context, accountName string) error {
	query := fmt.Sprintf("delete from %s where `accountName` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, accountName)
	return err
}

func (m *defaultTbUserInfoModel) FindOne(ctx context.Context, accountName string) (*TbUserInfo, error) {
	query := fmt.Sprintf("select %s from %s where `accountName` = ? limit 1", tbUserInfoRows, m.table)
	var resp TbUserInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, accountName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbUserInfoModel) Insert(ctx context.Context, data *TbUserInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, tbUserInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AccountName, data.NickName, data.Birthday, data.Gender, data.AvatarPath)
	return ret, err
}

func (m *defaultTbUserInfoModel) Update(ctx context.Context, data *TbUserInfo) error {
	query := fmt.Sprintf("update %s set %s where `accountName` = ?", m.table, tbUserInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.NickName, data.Birthday, data.Gender, data.AvatarPath, data.AccountName)
	return err
}

func (m *defaultTbUserInfoModel) tableName() string {
	return m.table
}
