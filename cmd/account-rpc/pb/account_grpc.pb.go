// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pb/account.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountRpcService_ValidateToken_FullMethodName = "/pb.AccountRpcService/ValidateToken"
)

// AccountRpcServiceClient is the client API for AccountRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountRpcServiceClient interface {
	ValidateToken(ctx context.Context, in *TokenValidateReq, opts ...grpc.CallOption) (*TokenValidateResp, error)
}

type accountRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountRpcServiceClient(cc grpc.ClientConnInterface) AccountRpcServiceClient {
	return &accountRpcServiceClient{cc}
}

func (c *accountRpcServiceClient) ValidateToken(ctx context.Context, in *TokenValidateReq, opts ...grpc.CallOption) (*TokenValidateResp, error) {
	out := new(TokenValidateResp)
	err := c.cc.Invoke(ctx, AccountRpcService_ValidateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountRpcServiceServer is the server API for AccountRpcService service.
// All implementations must embed UnimplementedAccountRpcServiceServer
// for forward compatibility
type AccountRpcServiceServer interface {
	ValidateToken(context.Context, *TokenValidateReq) (*TokenValidateResp, error)
	mustEmbedUnimplementedAccountRpcServiceServer()
}

// UnimplementedAccountRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountRpcServiceServer struct {
}

func (UnimplementedAccountRpcServiceServer) ValidateToken(context.Context, *TokenValidateReq) (*TokenValidateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedAccountRpcServiceServer) mustEmbedUnimplementedAccountRpcServiceServer() {}

// UnsafeAccountRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountRpcServiceServer will
// result in compilation errors.
type UnsafeAccountRpcServiceServer interface {
	mustEmbedUnimplementedAccountRpcServiceServer()
}

func RegisterAccountRpcServiceServer(s grpc.ServiceRegistrar, srv AccountRpcServiceServer) {
	s.RegisterService(&AccountRpcService_ServiceDesc, srv)
}

func _AccountRpcService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenValidateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRpcServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRpcService_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRpcServiceServer).ValidateToken(ctx, req.(*TokenValidateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountRpcService_ServiceDesc is the grpc.ServiceDesc for AccountRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AccountRpcService",
	HandlerType: (*AccountRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateToken",
			Handler:    _AccountRpcService_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/account.proto",
}
